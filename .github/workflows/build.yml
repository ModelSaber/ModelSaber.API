name: "Build"

on:
  push:
    branches: [ 'master' ]

env:
  RAW_URL: https://raw.githubusercontent.com/ModelSaber/ModelSaber.Main/master/Models

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Add github nuget repo
      run: dotnet nuget add source --username ${{ secrets.RUNNER_USER }} --password ${{ secrets.RUNNER_TOKEN }} --store-password-in-clear-text --name github "https://nuget.pkg.github.com/ModelSaber/index.json"

    - name: Bump version and push tag
      id: version
      uses: mathieudutour/github-tag-action@v6.0
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Install deps
      if: ${{ steps.version.outputs.new_tag != '' }}
      run: |
        rm ModelSaber.API.csproj
        mv ModelSaber.API.CI ModelSaber.API.csproj
        dotnet restore

    - name: Add missing files to project
      run: |
        mkdir Models
        cd Models
        wget ${{ env.RAW_URL }}/EnumerableExtensions.cs
        wget ${{ env.RAW_URL }}/FilterRank.cs
        wget ${{ env.RAW_URL }}/ModelSaberDbContext.cs

    - name: Build
      if: ${{ steps.version.outputs.new_tag != '' }}
      run: |
        dotnet build ModelSaber.API.CI.csproj -c Release --no-restore
        dotnet publish ModelSaber.API.CI.csproj -c Release -o ./publish -r linux-x64 /p:PublishSingleFile=true /p:Version=${{ steps.version.outputs.new_version }}
    
    - name: Pack Build
      if: ${{ steps.version.outputs.new_tag != '' }}
      run: |
        cd ./publish
        tar -zcvf ../api.tgz .
    
    - name: Create Release
      id: create_release
      if: ${{ steps.version.outputs.new_tag != '' }}
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.new_tag }}
        release_name: Release ${{ steps.version.outputs.new_tag }}
        body: ${{ steps.version.outputs.changelog }}
        draft: false
        prerelease: false

    - name: Upload Build
      if: ${{ steps.version.outputs.new_tag != '' }}
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./api.tgz
        asset_name: api.tgz
        asset_content_type: application/tar+gzip